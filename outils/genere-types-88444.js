//@ts-check

import { compile } from 'json-schema-to-typescript'

/** @import {SchemaDémarcheSimplifiée, ChampDescriptor} from '../scripts/types/démarches-simplifiées/schema.ts' */

/** @type {SchemaDémarcheSimplifiée} */
import schema88444 from '../data/démarches-simplifiées/schema-DS-88444.json' with {type: 'json'}


/** @import {JSONSchema} from 'json-schema-to-typescript' */

const { revision: { champDescriptors, annotationDescriptors } } = schema88444

const dossier88444JsonSchemaProperties = Object.create(null)

/**
 * @param {ChampDescriptor} _ 
 * @returns {JSONSchema}
 */
function champToStringJSONSchema({ description }){
    return { type: 'string', description }
}

/**
 * @param {ChampDescriptor} _ 
 * @returns {JSONSchema}
 */
function champToStringEnumJSONSchema({ description, options }){
    return { type: 'string', description, enum: options }
}

/**
 * @param {ChampDescriptor} _ 
 * @returns {JSONSchema}
 */
function champToDateJSONSchema({ description }){
    return { type: 'string', format: 'date-time', tsType: 'Date', description }
}

/**
 * @param {ChampDescriptor} _ 
 * @returns {JSONSchema}
 */
function champToBooleanJSONSchema({description}){
    return { type: 'boolean', description }
}

/**
 * @param {ChampDescriptor} _ 
 * @returns {JSONSchema}
 */
function champToNumberJSONSchema({ description }){
    return { type: 'number', description }
}



//@ts-ignore
const DSTypenameToJSONSchema = new Map([
    [ "DropDownListChampDescriptor", champToStringEnumJSONSchema ],
    [ "MultipleDropDownListChampDescriptor", champToStringEnumJSONSchema ],
    [ "YesNoChampDescriptor", champToBooleanJSONSchema ],
    [ "CheckboxChampDescriptor", champToBooleanJSONSchema ],
    [ "SiretChampDescriptor", champToStringJSONSchema ],
    [ "TextChampDescriptor", champToStringJSONSchema ],
    [ "AddressChampDescriptor", champToStringJSONSchema ],
    [ "PhoneChampDescriptor", champToStringJSONSchema ],
    [ "EmailChampDescriptor", champToStringJSONSchema ],
    [ "TextareaChampDescriptor", champToStringJSONSchema ],
    [ "IntegerNumberChampDescriptor", champToNumberJSONSchema ],
    [ "DecimalNumberChampDescriptor", champToNumberJSONSchema ],
    [ "DepartementChampDescriptor", champToStringJSONSchema ],
    // PPP : invalide, mais ne sait pas encore comment bien le gérer
    [ "RepetitionChampDescriptor", champToStringJSONSchema ],
    [ "CommuneChampDescriptor", champToStringJSONSchema ],
    [ "DateChampDescriptor", champToDateJSONSchema ]
])

const requiredDossier88444 = []

for (const champDescriptor of champDescriptors) {
    const { __typename, label } = champDescriptor

    const DSChampToJSONSchema = DSTypenameToJSONSchema.get(__typename)

    if (DSChampToJSONSchema) {
        dossier88444JsonSchemaProperties[label] = DSChampToJSONSchema(champDescriptor);

        // ignore champDescriptor.required
        requiredDossier88444.push(label)
    }
}


const dossierDémarcheSimplifiée88444JSONSchema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    type: "object",
    properties: dossier88444JsonSchemaProperties,
    additionalProperties: false,
    required: requiredDossier88444
}


const bannerComment = `/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run json-schema-to-typescript to regenerate this file.
*/`


compile(dossierDémarcheSimplifiée88444JSONSchema, 'DossierDémarcheSimplifiée88444', { bannerComment })
    .then(ts => console.log('ts', ts))